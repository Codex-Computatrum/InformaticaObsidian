# Network programming
>È possibile scegliere tra due diverse alternative per la progettazione di applicazioni che usano protocolli UTP o TCP:
>1. Standard protocol
>2. Proprietary protocol (custom)

L'approccio più comune consiste nel progettare applicazioni *on top* del protocollo standard HTTP, questo perché esso è versatile ed esistono già delle API utilizzabili.
## REST
>[!info]
>**REST** (**RE**presentational **S**tate **T**ransfer) è un insieme di principi architetturali che guidano i programmatori nella definizione di applicazioni web flessibili, scalabili e modulari, queste applicazioni vengono dette **RESTful APIs**.
Una **REST API** è una sorta di interfaccia tra diversi client e delle risorse condivise (e.g. un database).
### Elementi
- Risorse: le informazioni che gli host manipoleranno, identificate da **URI**(**U**niform **R**esource **I**dentifiers), possiamo vedere questi URI come una generalizzazione di URL che contengono anche il nome della risorsa.
- Rappresentazioni: Come le risorse sono strutturate e rappresentate in uno specifico formato (e.g. testo, [[2023-12-07 (XML, YAML, JSON)|XML, YAML, JSON]], etc.)
### Principi
1. **Client-Server**: nelle applicazioni **REST** i due host sono indipendenti:
	- I client conoscono unicamente gli *URI* delle risorse richieste.
	- I server non fanno altro che inviare le risorse tramite HTTP.
2. **Statelessness**: ogni richiesta deve contenere tutte le informazioni necessarie per essere compresa dal server, anziché dipendere dal fatto che il server ricordi richieste precedenti.
3. **Cacheability**: le risorse dovrebbero essere memorizzabili nella cache lato client o server.
 - Le risposte dovrebbero anche contenere informazioni su se la memorizzazione nella cache è consentita o meno per una risorsa specifica.
4. **Uniform interface**: tutte le richieste API per le stessa risorsa dovrebbero essere simili, a prescindere da dove provenga la richiesta.
5. **Layered system achitecture**: il messaggio può essere inoltrato a diversi intermediari, ma questo non dovrebbe essere "percepito" né dal client né dal server
6. **Code on demand** (opzionale): le risposte possono anche contenere del codice eseguibile, in questo caso questo codice dovrebbe esser eseguibile solo su richiesta.

La maggior parte di questi principi somigliano a delle feature del protocollol HTTP, in un certo senso, REST definisce come usare HTTP in una applicazione, infatti:
- il client accede alle risorse tramite richieste HTTP
- il server fornisce queste risorse tramite risposte HTTP.
## HTTP

^06840d

### Richieste
Un messaggio di richiesta include i seguenti campi:
- **method**: specifica il comando che il server deve eseguire.
- **URL**: serve per identificare l'object su cui vogliamo operare.
- **version**: specifica la versione di HTTP (e.g. HTTP/1.1))
- **header lines**: contiene i parametri della richiesta, il numero e il tipo di queste linee non sono fissi, ogni linea include il nome e il valore del parametro
- **body**: contiene dati potenzialmente associati al comando
### Risposte
Simili a quelli di richiesta, contengono:
- **version**: cioé la versione HTTP della risposta del server.
- **status code**: un codice che specifica il risultato della richiesta
- **phrase**: il risultato della richiesta
### In pratica
#### Richieste
Le risorse sono identificate dal field  \[**URL**], le operazioni fatte sulle risorse sono specificate nel campo \[**Method**], esse sono:
- **Get**: richiedi una risorsa.
- **Post**: modifica una risorsa.
- **Put**: crea una nuova risorsa.
- **Delete**: elimina una risorsa.
#### Risposte
Le informazioni sulle richieste sono specificate dallo \[**status code**] e da \[**phrase**].
- **200**: risorsa gestita con successo.
- **201**: risorsa creata con successo.
- **404**: risorsa non trovata.
- **405**: metodo non supportato.
- etc.