---
author: Simone Parente
tags:
  - Reti
  - Network/Routing
Lezione: "17"
---
## Network Layer
### Algoritmi di routing
>Si occupano di cercare il percorso "migliore", in genere è quello con *costo* minore, ma bisogna tener conto di eventuali policies.
- Algoritmo di Dijkstra (percorsi minimi)
- Algoritmo di Bellman-Ford (supporta anche percosi con archi con peso negativo)
Sia $G=(V,E)$ il grafo che rappresenta la nostra rete, $V$ rappresenta l'insieme dei vertici, $E$ l'insieme degli archi, il **costo** di un percorso è una funzione $c:(N \times N) \to \mathbb{R}$, data una coppia di nodi $(x,y) \in N \times N$:
- $\forall (x,x), \; c(x,x)=0$
- Se $(x,y) \notin E,\; c(x,y)=\infty$
- Se $(x,y) \in E, \text{allora vale anche } (y,x) \in E, \; c(x,y)=c(y,x)$
Il costo di un percorso $\pi$ sarà uguale alla somma dei costi di tutti gli archi necessari da attraversare, quindi:
$$c(\pi)=\sum^{i=1}_{n-1} c(x_i,x_{i+1})$$
Sia $P(x,y)$ l'insieme di tutti i possibili percorsi da $x$ a $y$, possiamo definire il **percorso migliore** come il percorso $\pi^* \in P(x,y)$ con il minimo costo.
$$\forall \pi \in P(x,y), c(\pi^*) \leq c(\pi)$$

Esistono due famiglie principali di algoritmi:
- Distance-vector
	- Decentralizzati
	- Basati su una visione locale(basandosi sugli adiacenti)
- Link-State
	- Centralizzati
	- Hanno bisogno di avere informazioni sull'intera rete per fornire risultati
#### Algoritmi Distance-Vector
Basati sull'algoritmo di Bellman-Ford.
Ogni nodo riceve informazioni sui suoi adiacenti, effettua un calcolo e distribuisce il risultato a tutti gli adiacenti. Questo algoritmo è di tipo *asincrono*, in questo caso non necessita che tutti i nodi siano "coordinati" tra loro
$d^*(x,y)$ è il costo del miglior percorso da $x$ a $y$
Equazione di Bellman-Ford:
$$d^*(x,y)=\min\{c(x,v)+d^*(v,y)\}$$
- $v$ è adiacente a $x$
- Se riusciamo a trovare questo $v$
##### Pseudocodice
```
DistanceVector(x)
for all nodes v
	if v is a neighbor of x then
		Dx(v) = c(x,v)
	else
		for all neighbors w and destinations y
		Dw(y) = ?
		send initial Dx to all neighbors

repeat
if cost of a neighbor updated then
	for all nodes y
		(y) = minv{c(x,v) + Dv(y)}
if (y) changed for any destination y then
	send updated Dx to all neighbors
until false //forever
```
- $D_w(v)$ è una struttura dati in cui salviamo la istanza tra tutti i nodi $w$ e i nodi target $v$
Complessità: $O(|N| |E|)$
>[!danger] 
Il problema principale di questo algoritmo è che se viene interrotto (o aumenta di costo) un collegamento con un nodo (che sia a causa del nodo o del collegamento stesso), i nodi adiacenti possono impiegare un tempo potenzialmente infinito per propagare l'informazione ai nodi adiacenti, una possibile soluzione è utilizzare uno scalare "soglia" oltre il quale il nodo sarà considerato irraggiungibile.
#### Algoritmi Link-State
Algoritmi centralizzati che hanno la completa conoscenza della rete in modo tale da trovare il miglior percorso (basato su Dijkstra)
##### Pseudocodice
```
LinkState(x):
	for all nodes v
		if v is a neighbor of x then
			D(v) = c(x,v)
		else
			D(V) 00

repeat
	find w not in N' such that D(w) is a minimum
	add w to N'
	update D(v) for each neighbor v of w and not in N': D(v) = 
					min( D(v), D(w) + c(w,v) )
	until N'= N
```
 et